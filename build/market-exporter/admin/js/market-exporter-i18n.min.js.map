{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/memize/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectSpread.js","webpack:///./node_modules/@tannin/postfix/index.js","webpack:///./node_modules/@tannin/evaluate/index.js","webpack:///./node_modules/@tannin/compile/index.js","webpack:///./node_modules/tannin/index.js","webpack:///./node_modules/@tannin/plural-forms/index.js","webpack:///./node_modules/@wordpress/i18n/build-module/index.js","webpack:///./_src/i18n.js","webpack:///./node_modules/sprintf-js/src/sprintf.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperty","obj","configurable","writable","__webpack_exports__","fn","options","maxSize","head","tail","size","memoized","args","node","len","arguments","length","searchCache","next","prev","val","Array","apply","clear","_objectSpread","_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","PRECEDENCE","OPENERS","TERMINATORS","PATTERN","(","!","*","/","%","+","-","<","<=",">",">=","==","!=","&&","||","?","?:",")",":","OPERATORS","a","b","compile","expression","terms","match","operator","term","element","stack","substr","index","trim","push","pop","indexOf","reverse","postfix","variables","j","getOperatorResult","earlyReturn","evaluate_evaluate","DEFAULT_OPTIONS","contextDelimiter","onMissingKey","Tannin","data","this","pluralForms","getPluralForm","domain","config","plural","pf","evaluate","plural_forms","parts","part","split","getPluralExpression","dcnpgettext","context","singular","entry","undefined","DEFAULT_LOCALE_DATA","","logErrorOnce","memize_default","console","error","i18n","setLocaleData","objectSpread","single","number","__","text","_x","_n","_nx","build_module_sprintf","format","_len","_key","sprintf_default","sprintf","toString","window","wooyaI18n","wpI18n","__WEBPACK_AMD_DEFINE_RESULT__","re","not_string","not_bool","not_type","not_primitive","numeric_arg","json","not_json","modulo","placeholder","key_access","index_access","sign","parse_tree","argv","arg","k","ph","pad","pad_character","pad_length","is_positive","cursor","tree_length","output","Error","param_no","test","type","Function","isNaN","TypeError","parseInt","String","fromCharCode","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","slice","toLowerCase","valueOf","toUpperCase","replace","pad_char","charAt","repeat","align","sprintf_format","fmt","sprintf_cache","_fmt","arg_names","exec","SyntaxError","field_list","replacement_field","field_match","sprintf_parse","vsprintf"],"mappings":"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","file":"market-exporter-i18n.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","module.exports = function memize( fn, options ) {\n\tvar size = 0,\n\t\tmaxSize, head, tail;\n\n\tif ( options && options.maxSize ) {\n\t\tmaxSize = options.maxSize;\n\t}\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\tnode.prev.next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\thead.prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args )\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === maxSize ) {\n\t\t\ttail = tail.prev;\n\t\t\ttail.next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\treturn memoized;\n};\n","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","var PRECEDENCE, OPENERS, TERMINATORS, PATTERN;\n\n/**\n * Operator precedence mapping.\n *\n * @type {Object}\n */\nPRECEDENCE = {\n\t'(': 9,\n\t'!': 8,\n\t'*': 7,\n\t'/': 7,\n\t'%': 7,\n\t'+': 6,\n\t'-': 6,\n\t'<': 5,\n\t'<=': 5,\n\t'>': 5,\n\t'>=': 5,\n\t'==': 4,\n\t'!=': 4,\n\t'&&': 3,\n\t'||': 2,\n\t'?': 1,\n\t'?:': 1,\n};\n\n/**\n * Characters which signal pair opening, to be terminated by terminators.\n *\n * @type {string[]}\n */\nOPENERS = [ '(', '?' ];\n\n/**\n * Characters which signal pair termination, the value an array with the\n * opener as its first member. The second member is an optional operator\n * replacement to push to the stack.\n *\n * @type {string[]}\n */\nTERMINATORS = {\n\t')': [ '(' ],\n\t':': [ '?', '?:' ],\n};\n\n/**\n * Pattern matching operators and openers.\n *\n * @type {RegExp}\n */\nPATTERN = /<=|>=|==|!=|&&|\\|\\||\\?:|\\(|!|\\*|\\/|%|\\+|-|<|>|\\?|\\)|:/;\n\n/**\n * Given a C expression, returns the equivalent postfix (Reverse Polish)\n * notation terms as an array.\n *\n * If a postfix string is desired, simply `.join( ' ' )` the result.\n *\n * @example\n *\n * ```js\n * import postfix from '@tannin/postfix';\n *\n * postfix( 'n > 1' );\n * // ⇒ [ 'n', '1', '>' ]\n * ```\n *\n * @param {string} expression C expression.\n *\n * @return {string[]} Postfix terms.\n */\nexport default function postfix( expression ) {\n\tvar terms = [],\n\t\tstack = [],\n\t\tmatch, operator, term, element;\n\n\twhile ( ( match = expression.match( PATTERN ) ) ) {\n\t\toperator = match[ 0 ];\n\n\t\t// Term is the string preceding the operator match. It may contain\n\t\t// whitespace, and may be empty (if operator is at beginning).\n\t\tterm = expression.substr( 0, match.index ).trim();\n\t\tif ( term ) {\n\t\t\tterms.push( term );\n\t\t}\n\n\t\twhile ( ( element = stack.pop() ) ) {\n\t\t\tif ( TERMINATORS[ operator ] ) {\n\t\t\t\tif ( TERMINATORS[ operator ][ 0 ] === element ) {\n\t\t\t\t\t// Substitution works here under assumption that because\n\t\t\t\t\t// the assigned operator will no longer be a terminator, it\n\t\t\t\t\t// will be pushed to the stack during the condition below.\n\t\t\t\t\toperator = TERMINATORS[ operator ][ 1 ] || operator;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if ( OPENERS.indexOf( element ) >= 0 || PRECEDENCE[ element ] < PRECEDENCE[ operator ] ) {\n\t\t\t\t// Push to stack if either an opener or when pop reveals an\n\t\t\t\t// element of lower precedence.\n\t\t\t\tstack.push( element );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// For each popped from stack, push to terms.\n\t\t\tterms.push( element );\n\t\t}\n\n\t\tif ( ! TERMINATORS[ operator ] ) {\n\t\t\tstack.push( operator );\n\t\t}\n\n\t\t// Slice matched fragment from expression to continue match.\n\t\texpression = expression.substr( match.index + operator.length );\n\t}\n\n\t// Push remainder of operand, if exists, to terms.\n\texpression = expression.trim();\n\tif ( expression ) {\n\t\tterms.push( expression );\n\t}\n\n\t// Pop remaining items from stack into terms.\n\treturn terms.concat( stack.reverse() );\n}\n","/**\n * Operator callback functions.\n *\n * @type {Object}\n */\nvar OPERATORS = {\n\t'!': function( a ) {\n\t\treturn ! a;\n\t},\n\t'*': function( a, b ) {\n\t\treturn a * b;\n\t},\n\t'/': function( a, b ) {\n\t\treturn a / b;\n\t},\n\t'%': function( a, b ) {\n\t\treturn a % b;\n\t},\n\t'+': function( a, b ) {\n\t\treturn a + b;\n\t},\n\t'-': function( a, b ) {\n\t\treturn a - b;\n\t},\n\t'<': function( a, b ) {\n\t\treturn a < b;\n\t},\n\t'<=': function( a, b ) {\n\t\treturn a <= b;\n\t},\n\t'>': function( a, b ) {\n\t\treturn a > b;\n\t},\n\t'>=': function( a, b ) {\n\t\treturn a >= b;\n\t},\n\t'==': function( a, b ) {\n\t\treturn a === b;\n\t},\n\t'!=': function( a, b ) {\n\t\treturn a !== b;\n\t},\n\t'&&': function( a, b ) {\n\t\treturn a && b;\n\t},\n\t'||': function( a, b ) {\n\t\treturn a || b;\n\t},\n\t'?:': function( a, b, c ) {\n\t\tif ( a ) {\n\t\t\tthrow b;\n\t\t}\n\n\t\treturn c;\n\t},\n};\n\n/**\n * Given an array of postfix terms and operand variables, returns the result of\n * the postfix evaluation.\n *\n * @example\n *\n * ```js\n * import evaluate from '@tannin/evaluate';\n *\n * // 3 + 4 * 5 / 6 ⇒ '3 4 5 * 6 / +'\n * const terms = [ '3', '4', '5', '*', '6', '/', '+' ];\n *\n * evaluate( terms, {} );\n * // ⇒ 6.333333333333334\n * ```\n *\n * @param {string[]} postfix   Postfix terms.\n * @param {Object}   variables Operand variables.\n *\n * @return {*} Result of evaluation.\n */\nexport default function evaluate( postfix, variables ) {\n\tvar stack = [],\n\t\ti, j, args, getOperatorResult, term, value;\n\n\tfor ( i = 0; i < postfix.length; i++ ) {\n\t\tterm = postfix[ i ];\n\n\t\tgetOperatorResult = OPERATORS[ term ];\n\t\tif ( getOperatorResult ) {\n\t\t\t// Pop from stack by number of function arguments.\n\t\t\tj = getOperatorResult.length;\n\t\t\targs = Array( j );\n\t\t\twhile ( j-- ) {\n\t\t\t\targs[ j ] = stack.pop();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvalue = getOperatorResult.apply( null, args );\n\t\t\t} catch ( earlyReturn ) {\n\t\t\t\treturn earlyReturn;\n\t\t\t}\n\t\t} else if ( variables.hasOwnProperty( term ) ) {\n\t\t\tvalue = variables[ term ];\n\t\t} else {\n\t\t\tvalue = +term;\n\t\t}\n\n\t\tstack.push( value );\n\t}\n\n\treturn stack[ 0 ];\n}\n","import postfix from '@tannin/postfix';\nimport evaluate from '@tannin/evaluate';\n\n/**\n * Given a C expression, returns a function which can be called to evaluate its\n * result.\n *\n * @example\n *\n * ```js\n * import compile from '@tannin/compile';\n *\n * const evaluate = compile( 'n > 1' );\n *\n * evaluate( { n: 2 } );\n * // ⇒ true\n * ```\n *\n * @param {string} expression C expression.\n *\n * @return {Function} Compiled evaluator.\n */\nexport default function compile( expression ) {\n\tvar terms = postfix( expression );\n\n\treturn function( variables ) {\n\t\treturn evaluate( terms, variables );\n\t};\n}\n","import pluralForms from '@tannin/plural-forms';\n\n/**\n * Tannin constructor options.\n *\n * @property {?string}   contextDelimiter Joiner in string lookup with context.\n * @property {?Function} onMissingKey     Callback to invoke when key missing.\n *\n * @type {Object}\n *\n * @typedef {TanninOptions}\n */\n\n/**\n * Default Tannin constructor options.\n *\n * @type {TanninOptions}\n */\nvar DEFAULT_OPTIONS = {\n\tcontextDelimiter: '\\u0004',\n\tonMissingKey: null,\n};\n\n/**\n * Given a specific locale data's config `plural_forms` value, returns the\n * expression.\n *\n * @example\n *\n * ```\n * getPluralExpression( 'nplurals=2; plural=(n != 1);' ) === '(n != 1)'\n * ```\n *\n * @param {string} pf Locale data plural forms.\n *\n * @return {string} Plural forms expression.\n */\nfunction getPluralExpression( pf ) {\n\tvar parts, i, part;\n\n\tparts = pf.split( ';' );\n\n\tfor ( i = 0; i < parts.length; i++ ) {\n\t\tpart = parts[ i ].trim();\n\t\tif ( part.indexOf( 'plural=' ) === 0 ) {\n\t\t\treturn part.substr( 7 );\n\t\t}\n\t}\n}\n\n/**\n * Tannin constructor.\n *\n * @param {Object}        data    Jed-formatted locale data.\n * @param {TanninOptions} options Tannin options.\n */\nexport default function Tannin( data, options ) {\n\tvar key;\n\n\tthis.data = data;\n\tthis.pluralForms = {};\n\n\toptions = options || {};\n\tthis.options = {};\n\tfor ( key in DEFAULT_OPTIONS ) {\n\t\tthis.options[ key ] = options[ key ] || DEFAULT_OPTIONS[ key ];\n\t}\n}\n\n/**\n * Returns the plural form index for the given domain and value.\n *\n * @param {string} domain Domain on which to calculate plural form.\n * @param {number} n      Value for which plural form is to be calculated.\n *\n * @return {number} Plural form index.\n */\nTannin.prototype.getPluralForm = function( domain, n ) {\n\tvar getPluralForm = this.pluralForms[ domain ],\n\t\tconfig, plural, pf;\n\n\tif ( ! getPluralForm ) {\n\t\tconfig = this.data[ domain ][ '' ];\n\n\t\tpf = (\n\t\t\tconfig[ 'Plural-Forms' ] ||\n\t\t\tconfig[ 'plural-forms' ] ||\n\t\t\tconfig.plural_forms\n\t\t);\n\n\t\tif ( typeof pf !== 'function' ) {\n\t\t\tplural = getPluralExpression(\n\t\t\t\tconfig[ 'Plural-Forms' ] ||\n\t\t\t\tconfig[ 'plural-forms' ] ||\n\t\t\t\tconfig.plural_forms\n\t\t\t);\n\n\t\t\tpf = pluralForms( plural );\n\t\t}\n\n\t\tgetPluralForm = this.pluralForms[ domain ] = pf;\n\t}\n\n\treturn getPluralForm( n );\n};\n\n/**\n * Translate a string.\n *\n * @param {string} domain   Translation domain.\n * @param {string} context  Context distinguishing terms of the same name.\n * @param {string} singular Primary key for translation lookup.\n * @param {string} plural   Fallback value used for non-zero plural form index.\n * @param {number} n        Value to use in calculating plural form.\n *\n * @return {string} Translated string.\n */\nTannin.prototype.dcnpgettext = function( domain, context, singular, plural, n ) {\n\tvar index, key, entry;\n\n\tif ( n === undefined ) {\n\t\t// Default to singular.\n\t\tindex = 0;\n\t} else {\n\t\t// Find index by evaluating plural form for value.\n\t\tindex = this.getPluralForm( domain, n );\n\t}\n\n\tkey = singular;\n\n\t// If provided, context is prepended to key with delimiter.\n\tif ( context ) {\n\t\tkey = context + this.options.contextDelimiter + singular;\n\t}\n\n\tentry = this.data[ domain ][ key ];\n\n\t// Verify not only that entry exists, but that the intended index is within\n\t// range and non-empty.\n\tif ( entry && entry[ index ] ) {\n\t\treturn entry[ index ];\n\t}\n\n\tif ( this.options.onMissingKey ) {\n\t\tthis.options.onMissingKey( singular, domain );\n\t}\n\n\t// If entry not found, fall back to singular vs. plural with zero index\n\t// representing the singular value.\n\treturn index === 0 ? singular : plural;\n};\n","import compile from '@tannin/compile';\n\n/**\n * Given a C expression, returns a function which, when called with a value,\n * evaluates the result with the value assumed to be the \"n\" variable of the\n * expression. The result will be coerced to its numeric equivalent.\n *\n * @param {string} expression C expression.\n *\n * @return {Function} Evaluator function.\n */\nexport default function pluralForms( expression ) {\n\tvar evaluate = compile( expression );\n\n\treturn function( n ) {\n\t\treturn +evaluate( { n: n } );\n\t};\n}\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\n/**\n * External dependencies\n */\nimport Tannin from 'tannin';\nimport memoize from 'memize';\nimport sprintfjs from 'sprintf-js';\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n *\n * @type {Object}\n */\n\nvar DEFAULT_LOCALE_DATA = {\n  '': {\n    plural_forms: 'plural=(n!=1)'\n  }\n};\n/**\n * Log to console, once per message; or more precisely, per referentially equal\n * argument set. Because Jed throws errors, we log these to the console instead\n * to avoid crashing the application.\n *\n * @param {...*} args Arguments to pass to `console.error`\n */\n\nvar logErrorOnce = memoize(console.error); // eslint-disable-line no-console\n\n/**\n * The underlying instance of Tannin to which exported functions interface.\n *\n * @type {Tannin}\n */\n\nvar i18n = new Tannin({});\n/**\n * Merges locale data into the Tannin instance by domain. Accepts data in a\n * Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {?Object} data   Locale data configuration.\n * @param {?string} domain Domain for which configuration applies.\n */\n\nexport function setLocaleData(data) {\n  var domain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n  i18n.data[domain] = _objectSpread({}, DEFAULT_LOCALE_DATA, i18n.data[domain], data); // Populate default domain configuration (supported locale date which omits\n  // a plural forms expression).\n\n  i18n.data[domain][''] = _objectSpread({}, DEFAULT_LOCALE_DATA[''], i18n.data[domain]['']);\n}\n/**\n * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n * otherwise previously assigned.\n *\n * @param {?string} domain  Domain to retrieve the translated text.\n * @param {?string} context Context information for the translators.\n * @param {string}  single  Text to translate if non-plural. Used as fallback\n *                          return value on a caught error.\n * @param {?string} plural  The text to be used if the number is plural.\n * @param {?number} number  The number to compare against to use either the\n *                          singular or plural form.\n *\n * @return {string} The translated string.\n */\n\nfunction dcnpgettext() {\n  var domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  var context = arguments.length > 1 ? arguments[1] : undefined;\n  var single = arguments.length > 2 ? arguments[2] : undefined;\n  var plural = arguments.length > 3 ? arguments[3] : undefined;\n  var number = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (!i18n.data[domain]) {\n    setLocaleData(undefined, domain);\n  }\n\n  return i18n.dcnpgettext(domain, context, single, plural, number);\n}\n/**\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n *\n * @param {string}  text   Text to translate.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} Translated text.\n */\n\n\nexport function __(text, domain) {\n  return dcnpgettext(domain, undefined, text);\n}\n/**\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n *\n * @param {string}  text    Text to translate.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} Translated context string without pipe.\n */\n\nexport function _x(text, context, domain) {\n  return dcnpgettext(domain, context, text);\n}\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n *\n * @param {string}  single The text to be used if the number is singular.\n * @param {string}  plural The text to be used if the number is plural.\n * @param {number}  number The number to compare against to use either the\n *                         singular or plural form.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\n\nexport function _n(single, plural, number, domain) {\n  return dcnpgettext(domain, undefined, single, plural, number);\n}\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n *\n * @param {string}  single  The text to be used if the number is singular.\n * @param {string}  plural  The text to be used if the number is plural.\n * @param {number}  number  The number to compare against to use either the\n *                          singular or plural form.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\n\nexport function _nx(single, plural, number, context, domain) {\n  return dcnpgettext(domain, context, single, plural, number);\n}\n/**\n * Returns a formatted string. If an error occurs in applying the format, the\n * original format string is returned.\n *\n * @param {string}   format  The format of the string to generate.\n * @param {...string} args Arguments to apply to the format.\n *\n * @see http://www.diveintojavascript.com/projects/javascript-sprintf\n *\n * @return {string} The formatted string.\n */\n\nexport function sprintf(format) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return sprintfjs.sprintf.apply(sprintfjs, [format].concat(args));\n  } catch (error) {\n    logErrorOnce('sprintf error: \\n\\n' + error.toString());\n    return format;\n  }\n}\n//# sourceMappingURL=index.js.map","import * as wpI18n from '@wordpress/i18n';\n\nwindow.wooyaI18n = wpI18n;\n","/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"],"sourceRoot":""}